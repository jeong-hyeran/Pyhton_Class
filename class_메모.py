# 3/8 수업

# 언어? 
# 대화, 소통
# 사람 <-> 컴퓨터
# 명령(연산)

# 프로그래밍(진행순서)
# 코딩(약속된 부호, 기호, 키워드등을 나영하는 행위 또는 그 작업)
# 코딩은 사람이 알아보기 위해 만든 명령문서 - 오더장

# **진행순서에 맞게 명령해야한다.
# 모든일에는 절차가 있다
# 어떠한 언어든 '절차지향적이다'
# 컴퓨터는 똥멍충이, 단 계산만 빠르다.
# 컴퓨터는 사람이 명령 내린대로만 한다.
# 컴퓨터에게 연산을 맡길때 '약속된 부호, 기호, 키워드등'으로 명령한다

# 목적
# 궁근적인 근복적인 목적은
# 사람이 쉽게 해결할 수 없는 문제를 맡겨서 쉽게 해결하기 위해 => 연산

# 파이썬이라는 언어를 배울 것이다.



# [컴퓨터 언어의 분류 1]

# 원시언어 (저급언어)
# - 기계친화적 언어(기계어에 가까워서 알아보기 어렵다, 기계와 직접적으로 통신을 한다.)
# - 기계어, 어셈블리어
# - 길다
# - 어렵다

# 고급언어
# - 인간친화적 언어(사람말에 가깝다.)
# - 코볼, 포트란 이후의 모든언어
# - 짧고 간결하다
# - 쉽다

# [컴퓨터 언어의 분류2]

# 설계 - > 문서작성 - > 번역 - > 목적프로그램 생성 - > 실행
# 	ㄴ버그,에러수정┘
# 	(버그, 에러 차이 - 에러는 문법이 마자지 않아 실행조차 불가, 버그는 문법에는 문제 없어서 실행이 되지만 작성자의 의도와는 다른 결과가 나오는 것) / (버그를 찾아내는것을 디버깅, 버그는 컴퓨터가 알려주지 않고 사람이 찾아야하는데 여러번 사용해봐야지 알 수 있다.)

# 컴파일러 언어
# - c,c++
# - 컴파일러로 번역
# - 문서 전체를 한번에 번역 후 실행(문서를 통번역, 한번에 주문)
#  -> 에러가 여러개가 검출될 수 있다
# - 실행 속도가 빠름

# 인터프리터 언어
# - basic, pyhton
# - 인터프리터(해석기)로 번역
# - 한명령씩 번역 후 실행(하나씩 주문,실행(명령해석 반복))
#  -> 맨 처음 에러 1개만 검출 된다. (첫 에러 후에 멈춰버린다)
# - 실행 속도가 느림


# -------------------------------------------------------------------
# 세변의 길이로 삼각형의 종류를 판단하는 프로그램을 작성하세요!!!
# (세변의 길이가 모두같은 정삼각형, 두변은 같고 나머지 한변은 다른 2등변 삼각형, 일반삼각형)

# 3변의 길이를 입력 한다
# a=2, b=2 ,c=10 [입력함수를 사용해서 실행시 입력]
# 가장 긴변의 길이가 나머지 2변의 길이의 합보다 작은지 확인
# [3각형의 조건 성립확인]
# 위의 조건이 맞지 않으면 입력부터 다시

# a == b == c [ 정삼각형 ]
# a == b != c
# a == c != b
# b == c != a [이등변 삼각형]

# 위 2가지가 모두 아니면 [ 일반삼각형 ]

# 위의 결과를 result에 저장하고 출력한다.

# --------------------------------------------------------------------------
# ***코드를 보고 사람말로 변경해서 다시코드로 만들어보고  기존 코드를 보고 비교 하면서 공부하면 외워지고 그럼 익숙해진다!!!




# [컴퓨터 언어의 분류 3]

# Unmanaged 언어
# - C, C++
# - 하드웨어를 효율적으로 운영 (메모리)
# - 주로 운영체제나 유틸리티 제작에 많이 사용됨
#  -> 단, 많이 알려져있어 보안에 취약함
# - 어렵다

# Managed 언어
# - java, pyhton
# - 하드웨어를 비효율적으로 운영
# - 자칫 무거워지는 경향이 강하다
# - 주로 동작이나, 기능적인면을 작성하고, 메모리를 효율적으로 
#   사용해야하는 부분은 Unmanaged와 합쳐서 사용한다.
#  -> 접착성이 강하다(pyhton)
# - 쉽다(상대적임)

# 3/9 수업

# [python 설치]
# 항상 수업 시작 할 때 폴더를 우클릭해서 코드로 열기 해서 들어가야한다.
# shell - 사람의 언어를 번역해서 컴퓨터에게 명령해서 실행하는 창
# python
# 파일명 뒤에 확장자가 중요!!
# (.py, .c 등등)
# 확장자를 안써주면 TXT로된다.
# 확장자를 안써주면 번역기가 안따라온다.

# 기본설정에서 폰트 지정
# 파일 - 기본설정 - 설정 - 텍스트편집기
# 실행에 구성추가 들어가서 
# external 으로 변경 하면 콘솔이라는 팝업이 뜬다.


# 함수란?
# 함수 = function = 기능

# 함수는 어떤 기능, 동작등을 소규모의 프로그램을 정의 해놓은 키워드

# 함수는 함수의 정의와 함수의 호출로 구성된

# 함수는 표준함수와 사용자 정의함수로 구분됨
#          (기성복)           (맞춤복)
# 표준함수는 이미 정의된 내용이 설치되기 때문에 호출만 하면 됨.

# 사용자 정의 함수는 필요에 따라 새로운 동작을 정의하는것을 의미
# -------------------------------------
# C언어식표현
# #intclude,stdio.h.
# int main (void)
# {
# printf("오늘은 파이썬 첫날 ^^~~\\\n")
# 등등으로 표현 된다....
# ----------------------------------------
# 함수라는 예약어에는 항상 괄호가 들어간다.

# 함수명(인수1, 인수2,....)
# ※인수는 필요에 따라서 생략가능함

# 괄호의 역할
# 괄호 안에있는 것을 출력해줘의 의미..
# 컴퓨터는 헷갈리거나 알수 없으면 무조건 에러다.
# C언어 파이썬 비교를 많이 할것인데
# 파이썬은 문법이 쉬어 배우기 쉽다.
# C언어는 문법이 어려운데 유연한다.
# C언어는 에러성이지만 경고처리만하고 넘어가는 경우가 있는데
# 파이썬은 무조건 에러를 낸다.

# SyntaxError(에러유형) 구문오류라는 의미
# 구성요소가 있어야할게 없거나 없어야하는게 있을 때 나는 에러
# unexpected EOF while parsing : 구문 분석 중 예기치 않은 EOF

# 괄호랑 따옴표는 열고 닫고를 다 잘해줘야한다.
# IndentationError: unexpected indent
# 들여쓰기 오류: 예기치 않은 들여쓰기

# 참일때 실행 
# 종속문..파이썬에선 종속문을 할때 들여쓰기를 해야한다.
# 들여쓰기 할때는 :(콜론)을 사용해줘야 한다.
# 조건문과 종속문과 구문하는게 :(콜론)

# 자동삽입은 이미 자동으로 삽입되는 것이라 적으면 두번적히는 것
# 생략가능은 적어도 그만 안적어도 그만 결과에 영향 없음

# \n - print 함수에는 닫는 괄호 앞에 붙어있다.
# 자동삽입되는 

# 내일 수업때 '폴더'를 우클릭 코드로 실행
# class_0310.py 파일 만들어서 대기하자

# 3/10 수업
# ;(쎄미콜론) 생략 가능하다.
# 하나의 명령을 종료하는 의미를 가지고 있다.
# (C언어에서는 무조건들어가야하지만 파이썬은 생략가능)
# 한 줄에 두개의 명령을 작성하려면 쎄미콜론이 들어가야한다.
# 간단하면서도 연관성이 있으면 한줄에 표현하기도 한다.

# #주석이란?
# #주석은 컴퓨터에게 전달하는 명령에서 예외처리하는 문법
# #주석은 크게 줄(행)주석과 블럭주석으로 나뉜다.
# #줄주석은 #뒤에 모두 주석처리된다.
# #블럭주석은 """(따옴표 3개)로 시작점을 지정하고 """로 끝을 지정하면
# #그 사이 모든행이 주석처리된다. 즉, 한번에 여러행을 주석처리한다.

# 주석의 용도
# 1.코멘트를 달때 필요하는데..
# 중요중요 요소 마다 코멘트를 달아놔야한다.
# IT는 협업이다. 다른 사람이랑 공유하기 위해
# 2.불필요한 코드를 예외 처리한다.
# 코드는 지우는 것이 아니다.!
# 오타가 나서 지우는 건 맞지만
# 코드짤때는 정답은 없지만 오답은 있다.
# 답은 여러개가 있다.
# 작성한 코드는 지우는 것이 아니고 간결한 코드와 긴 코드를 비교하며 공부하는게 좋다!
# 잘만든 프로그램은 누가봐도 짧고 간결하게 잘 알아볼 수 있는 것이 잘 만든 코드다.

# 주석만들 부분을 드레그(블럭처리?)해서 컨트롤+/ 하면 주석 처리가 된다!
# # 주석 단축키
# # ctrl + / [주석을 토글(on/off)방식으로 적용]
# # ctrl + k + c [주석을 누적 적용함](동시에 말고 순서대로)
# # ctrl + k + u [주석을 누적 해제함]